@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<section class="hero position-relative vh-100 d-flex align-items-center bg-black">
    <canvas id="fireworksCanvas" class="position-absolute top-0 start-0 w-100 h-100" style="z-index: 0; pointer-events: none;"></canvas>
    <div class="bg-image position-absolute top-0 start-0 w-100 h-100">

    </div>
    <div class="container position-relative z-1">
        <div class="row justify-content-center text-center text-white">
            <div class="col-lg-8">
                <div editable="rich">
                    <h1 class="display-1">Welcome to Digital Excellence</h1>
                    <p class="lead mb-5">Creating exceptional web experiences that spark innovation and drive success. Let's bring your digital vision to life.</p>
                </div>
                <a href="#services" class="btn btn-primary btn-lg px-4 me-3">Discover More</a>
                <a href="#contact" class="btn btn-outline-light btn-lg px-4">Get Started</a>
            </div>
        </div>
    </div>

    <script>
        //lc-needs-hard-refresh
        (function() {
            const canvas = document.getElementById('fireworksCanvas');
            const ctx = canvas.getContext('2d');
            let w = canvas.width = window.innerWidth;
            let h = canvas.height = window.innerHeight;
            const particles = [];
            const fireworks = [];

            class Firework {
                constructor() {
                    this.x = Math.random() * w;
                    this.y = h;
                    this.targetY = Math.random() * (h * 0.5);
                    this.speed = 3;
                    this.color = `hsl(${Math.random() * 360}, 100%, 50%)`;
                }

                update() {
                    this.y -= this.speed;
                    return this.y > this.targetY;
                }

                draw() {
                    ctx.fillStyle = this.color;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
                    ctx.fill();
                }

                explode() {
                    for(let i = 0; i < 50; i++) {
                        particles.push(new Particle(this.x, this.y, this.color));
                    }
                }
            }

            class Particle {
                constructor(x, y, color) {
                    this.x = x;
                    this.y = y;
                    this.color = color;
                    const angle = Math.random() * Math.PI * 2;
                    const speed = Math.random() * 5 + 2;
                    this.velX = Math.cos(angle) * speed;
                    this.velY = Math.sin(angle) * speed;
                    this.life = 1;
                }

                update() {
                    this.x += this.velX;
                    this.y += this.velY;
                    this.velY += 0.1;
                    this.life -= 0.02;
                    return this.life > 0;
                }

                draw() {
                    ctx.fillStyle = this.color;
                    ctx.globalAlpha = this.life;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, 1, 0, Math.PI * 2);
                    ctx.fill();
                }
            }

            function animate() {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
                ctx.fillRect(0, 0, w, h);

                if(Math.random() < 0.05) {
                    fireworks.push(new Firework());
                }

                fireworks.forEach((fw, i) => {
                    if(!fw.update()) {
                        fw.explode();
                        fireworks.splice(i, 1);
                    }
                    fw.draw();
                });

                particles.forEach((p, i) => {
                    if(!p.update()) {
                        particles.splice(i, 1);
                    } else {
                        p.draw();
                    }
                });

                ctx.globalAlpha = 1;
                requestAnimationFrame(animate);
            }

            window.addEventListener('resize', () => {
                w = canvas.width = window.innerWidth;
                h = canvas.height = window.innerHeight;
            });

            animate();
        })();
    </script>
</section>


 
  